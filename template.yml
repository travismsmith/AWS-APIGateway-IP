---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'IP Related APIs'
Parameters:
  Name:
    Type: 'String'
  DomainName:
    Type: 'String'
Resources:
  APIGatewayIP:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: 'Get IP Information'
      Name: 'IP'
      Body:
        swagger: '2.0'
        info:
          version: '2018-03-04T19:17:46Z'
          title: 'IP'
        schemes:
          - 'https'
        definitions:
          Empty:
            type: 'object'
            title: 'Empty Schema'
        paths:
          /:
            get:
              consumes:
                - 'application/json'
              produces:
                - 'application/json'
              responses:
                '200':
                  description: '200 response'
                  schema: $ref '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaGetIP}/invocations'
                passthroughBehavior: 'when_no_templates'
                httpMethod: 'POST'
                requestTemplates:
                  application/json: '{"source_ip":"$context.identity.sourceIp"}'
                contentHandling: 'CONVERT_TO_TEXT'
                type: 'aws'
  APIGatewayIPDeployment: 
    Type: 'AWS::ApiGateway::Deployment'
    Properties: 
      RestApiId: !Ref 'APIGatewayIP'
      Description: 'IP Production'
      StageName: 'LATEST'
  IAMRoleLambdaGetIP: 
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Path: '/'
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 'LambdaGetIP.Arn'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayIP}/*/GET/'
  LambdaGetIP:
    Type: 'AWS::Lambda::Function'
    Properties: 
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            # Set event data from the API Gateway to variables.
            source_ip = event['source_ip']
            return_status = 'success'
            return_message = source_ip
            return_dict = {'return_status': return_status,
              'return_message': return_message}
            return return_dict
      Description: 'Return Requestor IP from API Gateway'
      Runtime: 'python2.7'
      Handler: 'index.lambda_handler'
      Role: !GetAtt 'IAMRoleLambdaGetIP.Arn'
  BasePath:
    Type: 'AWS::ApiGateway::BasePathMapping'
    DependsOn: 'APIGatewayIPDeployment'
    Properties:
      BasePath: 'ip'
      DomainName: !Ref 'DomainName'
      RestApiId: !Ref 'APIGatewayIP'
      Stage: 'LATEST'
